version: '3.8'

services:
  web:
    build: 
      context: .          
      dockerfile: Dockerfile 
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles 
      - media_volume:/app/media        
    environment:
      - DEBUG=False                                   
      - DJANGO_SETTINGS_MODULE=jobit.settings       
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0  
      - SECRET_KEY=your-secret-key-here-change-in-production 
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}          
      - AZURE_STORAGE_CONNECTION_STRING=${AZURE_STORAGE_CONNECTION_STRING:-}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD:-}
      - DOCKER_BUILD=  # Clear build context for runtime 
    command: >
      sh -c "echo '🚀 Starting Job.it application...' &&
             echo '⏳ Checking database connection...' &&
             echo '🔄 Running database migrations...' &&
             python jobit/manage.py migrate &&
             echo '📚 Initializing skills from CSV...' &&
             python jobit/manage.py init_skills &&
             echo '⏭️ Skipping sample data initialization' &&
             echo '👤 Checking for superuser...' &&
             python jobit/manage.py shell -c \"
             try:
                 from django.contrib.auth.models import User
                 if not User.objects.filter(username='admin@jobit.com').exists():
                     User.objects.create_superuser('admin@jobit.com', 'admin@jobit.com', 'admin123')
                     print('✅ Created superuser: admin@jobit.com / admin123')
                 else:
                     print('✅ Superuser already exists')
             except Exception as e:
                 print(f'⚠️ Could not create superuser: {e}')
                 print('Continuing without superuser...')
             \" &&
             echo '📁 Collecting static files...' &&
             python jobit/manage.py collectstatic --noinput --clear &&
             echo '🌐 Starting Django server...' &&
             python jobit/manage.py runserver 0.0.0.0:8000"
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/')"]
      interval: 30s
      timeout: 10s       
      retries: 3         
      start_period: 40s  

volumes:
  static_volume:
    driver: local
  
  media_volume:
    driver: local